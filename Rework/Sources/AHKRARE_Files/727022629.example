############## Example1
#Include, Gdip.ahk ; http://www.autohotkey.com/board/topic/29449-gdi-standard-library-145-by-tic/
;#Include progressCircle.ahk
If !pToken := Gdip_Startup() {
	MsgBox, 48, gdiplus error!, Gdiplus failed to start. Please ensure you have gdiplus on your system
	ExitApp
}
circleObj := CreateCircleProgress(50,5)
Loop, 100 {
	UpdateCircleProgress(circleObj,A_Index)
	Sleep, 10
}
DestroyCircleProgress(circleObj)
Gdip_Shutdown(pToken)
ExitApp
############## Example2
#Include, Gdip.ahk ; http://www.autohotkey.com/board/topic/29449-gdi-standard-library-145-by-tic/
#Include progressCircle.ahk
f !pToken := Gdip_Startup() {
MsgBox, 48, gdiplus error!, Gdiplus failed to start. Please ensure you have gdiplus on your system
ExitApp

ownloadFile("http://download-installer.cdn.mozilla.net/pub/firefox/releases/26.0/win32/en-US/Firefox%20Setup%2026.0.exe", "firefox_setup.exe")
dip_Shutdown(pToken)
xitApp
ownloadFile(UrlToFile, SaveFileAs, Overwrite := True, UseProgressBar := True) {
;Check if the file already exists and if we must not overwrite it
  If (!Overwrite && FileExist(SaveFileAs))
	  Return
;Check if the user wants a progressbar
  If (UseProgressBar) {
	  ;Initialize the WinHttpRequest Object
		WebRequest := ComObjCreate("WinHttp.WinHttpRequest.5.1")
	  ;Download the headers
		WebRequest.Open("HEAD", UrlToFile)
		WebRequest.Send()
	  ;Store the header which holds the file size in a variable:
		FinalSize := WebRequest.GetResponseHeader("Content-Length")
	  ;Create the progressbar and the timer
		Progress, H80, , Downloading..., %UrlToFile%
		circleObj := CreateCircleProgress(450,60)
		SetTimer, __UpdateProgressBar, 100
  }
;Download the file
  UrlDownloadToFile, %UrlToFile%, %SaveFileAs%
;Remove the timer and the progressbar because the download has finished
  If (UseProgressBar) {
	  Progress, Off
	  SetTimer, __UpdateProgressBar, Off
	  DestroyCircleProgress(circleObj)
  }
Return
;The label that updates the progressbar
  __UpdateProgressBar:
	  ;Get the current filesize and tick
		CurrentSize := FileOpen(SaveFileAs, "r").Length ;FileGetSize wouldn't return reliable results
		CurrentSizeTick := A_TickCount
	  ;Calculate the downloadspeed
		Speed := Round((CurrentSize/1024-LastSize/1024)/((CurrentSizeTick-LastSizeTick)/1000)) . " Kb/s"
	  ;Save the current filesize and tick for the next time
		LastSizeTick := CurrentSizeTick
		LastSize := FileOpen(SaveFileAs, "r").Length
	  ;Calculate percent done
		PercentDone := Round(CurrentSize/FinalSize*100)
	  ;Update the ProgressBar
		Progress, %PercentDone%, %PercentDone%`% Done, Downloading...  (%Speed%), Downloading %SaveFileAs% (%PercentDone%`%)
		UpdateCircleProgress(circleObj,percentDone)
  Return
}